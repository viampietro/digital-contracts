#!/bin/bash

# This verification makes use of two fundamental tools, which are necessary to
# create a functioning transactional network with digital signature validation
# and access control:
#
# * cryptogen - generates the x509 certificates used to identify and
#   authenticate the various components in the network.
# * configtxgen - generates the requisite configuration artifacts for orderer
#   bootstrap and channel creation.
#
# Each tool consumes a configuration yaml file, within which we specify the topology
# of our network (cryptogen) and the location of our certificates for various
# configuration operations (configtxgen).  Once the tools have been successfully run,
# we are able to launch our network.  More detail on the tools and the structure of
# the network will be provided later in this document.  For now, let's get going...

# directory where configtxgen will look for configtx.yaml file
export FABRIC_CFG_PATH=${PWD}

# Print the usage message
function printHelp () {
  echo "Usage: "
  echo "  dcnet <mode> [-c <channel name>] [-t <timeout>]"
  echo "  dcnet -h|--help (print this message)"
  echo "    - <mode> - one of 'up', 'down', 'restart', 'generate' or 'run'"
  echo "      - 'up' - bring up the network with docker-compose up"
  echo "      - 'down' - bring up the network with docker-compose up"
  echo "      - 'restart' - bring up the network with docker-compose up"
  echo "      - 'generate' - generate required certificates and genesis block"
  echo "      - 'run' - run the generate then the up command"
  echo "    -c <channel name> - channel name to use (defaults to \"digital-contracts-channel\")"
  echo "    -t <timeout> - CLI timeout duration in microseconds (defaults to 10000)"
  echo
  echo "Typically, one would first generate the required certificates and "
  echo "genesis block, then bring up the network. e.g.:"
  echo
  echo "	dcnet generate -c <channelname>"
  echo "	dcnet up -c <channelname>"
  echo "	dcnet down -c <channelname>"
  echo
  echo "Taking all defaults:"
  echo "	dcnet generate"
  echo "	dcnet up"
  echo "	dcnet down"
}

# Ask user for confirmation to proceed
function askProceed () {
  read -p "Continue (y/n)? " ans
  case "$ans" in
    y|Y )
      echo "proceeding ..."
    ;;
    n|N )
      echo "exiting..."
      exit 1
    ;;
    * )
      echo "invalid response"
      askProceed
    ;;
  esac
}

# Obtain CONTAINER_IDS and remove them
# TODO Might want to make this optional - could clear other containers
function clearContainers () {
  CONTAINER_IDS=$(docker ps -aq)
  if [ -z "$CONTAINER_IDS" -o "$CONTAINER_IDS" == " " ]; then
    echo "---- No containers available for deletion ----"
  else
    docker rm -f $CONTAINER_IDS
  fi
}

# Delete any images that were generated as a part of this setup
# specifically the following images are often left behind:
# TODO list generated image naming patterns
function removeUnwantedImages() {
  DOCKER_IMAGE_IDS=$(docker images | grep "dev\|none\|test-vp\|peer[0-9]-" | awk '{print $3}')
  if [ -z "$DOCKER_IMAGE_IDS" -o "$DOCKER_IMAGE_IDS" == " " ]; then
    echo "---- No images available for deletion ----"
  else
    docker rmi -f $DOCKER_IMAGE_IDS
  fi
}

# Generate the needed certificates, the genesis block and start the network.
function networkUp () {
  # generate artifacts if they don't exist
  if [ ! -d "crypto-config" ]; then
    generateCerts
    generateChannelArtifacts
  fi
  CHANNEL_NAME=$CHANNEL_NAME TIMEOUT=$CLI_TIMEOUT docker-compose -f $COMPOSE_FILE up -d 2>&1
  if [ $? -ne 0 ]; then
    echo "ERROR !!!! Unable to start network"
    docker logs -f cli
    exit 1
  fi
  docker logs -f cli
}

# Tear down running network
function networkDown () {
  docker-compose -f $COMPOSE_FILE down
  # Don't remove containers, images, etc if restarting
  if [ "$MODE" != "restart" ]; then
    #Cleanup the chaincode containers
    clearContainers
    #Cleanup images
    removeUnwantedImages
    # remove orderer block and other channel configuration transactions and certs
    rm -rf channel-artifacts/*.block channel-artifacts/*.tx crypto-config
    # remove the docker-compose yaml file that was customized to the example
  fi
}

# Generates Org certs using cryptogen tool
function generateCerts (){
  
  which cryptogen
  if [ "$?" -ne 0 ]; then
    echo "cryptogen tool not found. exiting"
    exit 1
  fi

  echo
  echo "##########################################################"
  echo "##### Generate certificates using cryptogen tool #########"
  echo "##########################################################"

  cryptogen generate --config=./crypto-config.yaml
  if [ "$?" -ne 0 ]; then
    echo "Failed to generate certificates..."
    exit 1
  fi
  echo

}

# Generate orderer genesis block, channel configuration transaction and
# anchor peer update transactions
function generateChannelArtifacts() {
  
  which configtxgen
  if [ "$?" -ne 0 ]; then
    echo "configtxgen tool not found. exiting"
    exit 1
  fi

  echo "##########################################################"
  echo "#########  Generating Orderer Genesis block ##############"
  echo "##########################################################"
  # Note: For some unknown reason (at least for now) the block file can't be
  # named orderer.genesis.block or the orderer will fail to launch!
  configtxgen -profile DigitalContractsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block
  if [ "$?" -ne 0 ]; then
    echo "Failed to generate orderer genesis block..."
    exit 1
  fi
  echo
  echo "#################################################################"
  echo "### Generating channel configuration transaction 'channel.tx' ###"
  echo "#################################################################"
  configtxgen -profile DigitalContractsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME
  if [ "$?" -ne 0 ]; then
    echo "Failed to generate channel configuration transaction..."
    exit 1
  fi

  echo
  echo "###############################################################"
  echo "#######    Generating anchor peer update for BlMSP   ##########"
  echo "###############################################################"
  configtxgen -profile DigitalContractsChannel -outputAnchorPeersUpdate ./channel-artifacts/BlMSPanchors.tx \
  -channelID $CHANNEL_NAME -asOrg BlMSP
  
  if [ "$?" -ne 0 ]; then
    echo "Failed to generate anchor peer update for berger-levrault.comMSP..."
    exit 1
  fi

  echo
  echo "################################################################"
  echo "#######    Generating anchor peer update for MtpMSP   ##########"
  echo "################################################################"
  configtxgen -profile DigitalContractsChannel -outputAnchorPeersUpdate \
  ./channel-artifacts/MtpMSPanchors.tx -channelID $CHANNEL_NAME -asOrg MtpMSP

  if [ "$?" -ne 0 ]; then
    echo "Failed to generate anchor peer update for Org2MSP..."
    exit 1
  fi
  echo
}

# Obtain the OS and Architecture string that will be used to select the correct
# native binaries for your platform
OS_ARCH=$(echo "$(uname -s|tr '[:upper:]' '[:lower:]'|sed 's/mingw64_nt.*/windows/')-$(uname -m | sed 's/x86_64/amd64/g')" | awk '{print tolower($0)}')

# timeout duration - the duration the CLI should wait for a response from
# another container before giving up
CLI_TIMEOUT=10000

# channel name defaults to "mychannel"
CHANNEL_NAME="digital-contracts-channel"

# use this as the default docker-compose yaml definition
COMPOSE_FILE=docker-compose.yaml

# Parse help argument 
while getopts ":h?" opt; do
  case "$opt" in
    h|\?)
      printHelp
      exit 0
    ;;
  esac
done

# Retrieve first argument and discard it
MODE=$1; shift 

# Parse commandline options 
while getopts ":?c:t:" opt; do
  case "$opt" in
    c)
      CHANNEL_NAME=$OPTARG 
    ;;
    t)
      CLI_TIMEOUT=$OPTARG
    ;;
    \?)
      printHelp
      exit 1
    ;;
    :)
      echo "Invalid option : $OPTARG requires an argument"
      exit 1	
    ;;
  esac
done

# Determine whether starting, stopping, restarting or generating for announce
if [ "$MODE" == "up" ]; then
  EXPMODE="Starting"
elif [ "$MODE" == "down" ]; then
  EXPMODE="Stopping"
elif [ "$MODE" == "restart" ]; then
  EXPMODE="Restarting"
elif [ "$MODE" == "generate" ]; then
  EXPMODE="Generating certs and genesis block for"
elif [ "$MODE" == "run" ]; then
  EXPMODE="Generating crypto-materials and starting the network"
else
  printHelp
  exit 1
fi

# Announce what was requested
echo "${EXPMODE} with channel '${CHANNEL_NAME}' and CLI timeout of '${CLI_TIMEOUT}'"

# ask for confirmation to proceed
askProceed

#Create the network using docker compose
if [ "${MODE}" == "up" ]; then
  networkUp
elif [ "${MODE}" == "down" ]; then ## Clear the network
  networkDown
elif [ "${MODE}" == "generate" ]; then ## Generate Artifacts
  generateCerts
  generateChannelArtifacts
elif [ "${MODE}" == "restart" ]; then ## Restart the network
  networkDown
  networkUp
elif [ "${MODE}" == "run" ]; then ## Generate Artifacts
  networkDown
  generateCerts
  generateChannelArtifacts
  networkUp
else
  printHelp
  exit 1
fi
